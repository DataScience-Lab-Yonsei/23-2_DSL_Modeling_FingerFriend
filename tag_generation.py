{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1e79c39a-b942-469c-939b-b48a946492c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import openai\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tqdm.notebook import tqdm\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    ## 전처리\n",
    "    openai.api_key = ####\n",
    "\n",
    "    df_1 = pd.read_csv(\"응용통계학과.csv\")\n",
    "    df_2 = pd.read_csv('공식홈페이지.csv')\n",
    "    df_3 = pd.read_csv('국제처.csv')\n",
    "    df_4 = pd.read_csv('도서관.csv')\n",
    "    df_5 = pd.read_csv('AI_link.csv')\n",
    "    df_6 = pd.read_csv('econs_link.csv')\n",
    "    df_7 = pd.read_csv('생활관_최종.csv')\n",
    "    df_8 = pd.read_csv('인공지능융합대학_최종.csv')\n",
    "\n",
    "    df_1.rename(columns = {\"학과\":\"작성자\",\n",
    "                           \"서브\":\"공지\"},\n",
    "                inplace = True)\n",
    "    df_1.drop(columns = \"id\", inplace = True)\n",
    "    df_2.rename(columns = {\"학과\":\"공지\",\n",
    "                           \"서브\":\"작성자\"},\n",
    "                inplace = True)\n",
    "    df_3.rename(columns = {\"국제처\":\"작성자\",\n",
    "                           \"공지사항\":\"공지\"},\n",
    "                inplace = True)\n",
    "    df_4.rename(columns = {\"도서관\":\"작성자\"},\n",
    "                inplace = True)\n",
    "    df_4.drop(columns = \"id\", inplace = True)\n",
    "    df_5.drop(columns = \"id\", inplace = True)\n",
    "    df_6.drop(columns = \"id\", inplace = True)\n",
    "    df_7['생활관'] = df_7['생활관'] + ' ' + df_7['카테고리']\n",
    "    df_7.rename(columns = {\"생활관\":\"작성자\",\n",
    "                           \"서브\":\"공지\"},\n",
    "                inplace = True)\n",
    "    df_7.drop(columns = \"카테고리\", inplace = True)\n",
    "    df_7.drop(columns = \"id\", inplace = True)\n",
    "    df_8.rename(columns = {\"인공지능융합대학\":\"작성자\",\n",
    "                          \"작성일\":\"등록일\"},\n",
    "                inplace = True)\n",
    "    df_8.drop(columns = \"id\", inplace = True)\n",
    "\n",
    "    df = pd.concat([df_1, df_2, df_3, df_4, df_5, df_6, df_7, df_8])\n",
    "    df = df.reset_index(drop = True)\n",
    "\n",
    "    # 프롬프트 사용해 태그 생성\n",
    "    sampled_dfs = []\n",
    "    for author, group in df.groupby('작성자'):\n",
    "        if len(group) <= 100:\n",
    "            sampled_dfs.append(group)\n",
    "        else:\n",
    "            sampled_dfs.append(group.sample(n=100))\n",
    "            \n",
    "    df_1 = pd.concat(sampled_dfs)\n",
    "    df_1 = df_1.reset_index(drop = True)\n",
    "\n",
    "\n",
    "    input = []\n",
    "    answer = []\n",
    "    \n",
    "    for _ in tqdm(range(len(df_1))):\n",
    "        try:\n",
    "            if pd.isna(df_1['본문'][_]) == True:\n",
    "                input.append(df_1['제목'][_])\n",
    "                answer.append('내용 링크 본문 참고')\n",
    "            else:\n",
    "                resp = openai.ChatCompletion.create(\n",
    "                    model=\"gpt-3.5-turbo\",\n",
    "                    messages=[\n",
    "                        {\"role\": \"user\", \"content\": f\"\"\"\n",
    "                Generate five or less popular general tags related to the domain of these texts in Korean.\n",
    "                Always include specified 기간 in accordance to instruction.\n",
    "                instruction:\n",
    "                * 공모 기간 : 2022. 7. 12.(화) ~ 2022. 8. 8.(월)\n",
    "                * 공모 기간 : 2022. 1. 19.(수) ~ 2022. 2. 11.(금)\n",
    "                * 서류 접수 2022. 5. 18.(수) ~ 5. 31.(화)\n",
    "                \n",
    "                \n",
    "                ### Title : {df_1['제목'][_]}\n",
    "                \n",
    "                ### Text :  {df_1['본문'][_]}\n",
    "                        \"\"\"}\n",
    "                    ],\n",
    "                    temperature = 0.2,\n",
    "                    top_p = 0.1,\n",
    "                    max_tokens=256\n",
    "                )\n",
    "                input.append(df_1['제목'][_])\n",
    "                answer.append(resp.choices[0]['message']['content'].strip())\n",
    "        except Exception as e:\n",
    "            print(f\"Error occurred: {str(e)}\")\n",
    "\n",
    "    dataframe = pd.DataFrame({'제목' : input,\n",
    "                             '태그' : answer})\n",
    "\n",
    "    dataframe.to_csv('prompt.csv', index = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
